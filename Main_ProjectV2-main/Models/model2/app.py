from flask_cors import CORS
import os,json
import tempfile
from werkzeug.utils import secure_filename
from datetime import datetime
from PIL import Image
from docx import Document
from docx.shared import Inches
import google.generativeai as genai
from dotenv import load_dotenv
from io import BytesIO
import base64
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from docx.shared import RGBColor
from flask import Flask, request, jsonify
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
import requests

app = Flask(__name__)


CORS(app)

UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Load environment variables and configure Gemini
load_dotenv("api.env")
api_key = "AIzaSyBxnWDu2sQzzFC4wEerKNTKGGBD4JcOAxA"
if api_key is None:
    raise ValueError("GEMINI_API_KEY is not set in environment variables")
genai.configure(api_key=api_key)

# Set up the model
generation_config = {
    "temperature": 1,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 8192,
    "response_mime_type": "text/plain",
}

model = genai.GenerativeModel(
    model_name="gemini-1.5-pro",
    generation_config=generation_config,
)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def generate_ecg_details(image_path,hint):
    image = Image.open(image_path)
    current_date = datetime.now().strftime('%Y-%m-%d')
    print(hint)
    prompt = f"""Analyze this ECG image and provide a detailed report (Model V1). The disease detected by the preliminary model is: **{hint}**. Use this information to generate the report. If the disease is given, assume it was predicted by the V2 model and explicitly state this in the report. Ensure that the **interpretation** field includes this disease and tailor the analysis accordingly. Fill in **ALL** fields based on the information you can extract from the image. If you absolutely cannot determine a piece of information, state 'Unable to determine from the provided ECG image.' Do not use placeholders like '[To be filled]'. Make educated guesses where possible, but clearly indicate when you're making an assumption. Follow this structure:

**ECG ANALYSIS REPORT**

**1. PATIENT INFORMATION:**
- Name:
- Age:
- Gender:
- ID Number:
- Date of ECG:

**2. CLINICAL INFORMATION:**
- Reason for ECG:
- Relevant Medical History:
- Medications:

**3. ECG TECHNICAL DETAILS:**
- ECG Machine Used:
- Lead Configuration:
- Calibration:
- Recording Quality:

**4. ECG FINDINGS:**
**Rhythm and Rate:**
- Heart Rate:
- Rhythm:
- P Waves:
- PR Interval:
- QRS Complex:
- QT/QTc Interval:
- ST Segment:
- T Waves:

**Axis:**
- P Wave Axis:
- QRS Axis:
- T Wave Axis:

**Conduction and Morphology:**
- Atrial Conduction:
- Ventricular Conduction:
- QRS Morphology:
- ST-T Changes:

**5. INTERPRETATION:**
- Normal or Abnormal:
- Diagnosis/Findings:
- Comparison with Previous ECG (if available):

**6. CONCLUSION AND RECOMMENDATIONS:**
- Summary:
- Recommendations:
- Caution: This analysis is generated by an AI system (Model V2). For accurate diagnosis and treatment, please consult with a qualified healthcare professional.

**7. REPORTING CARDIOLOGIST:**
- Name:
- Signature: Unable to provide signature for AI-generated report.
- Date of Report: {current_date}
"""
    chat_session = model.start_chat(history=[])
    response = chat_session.send_message([prompt, image])
    return response.text

def create_doc(report_text, image_path):
    doc = Document()
    
    # Add title with styling
    title = doc.add_heading('ECG ANALYSIS REPORT', 0)
    title.alignment = 1  # Center alignment
    
    # Process the report text
    sections = report_text.split('\n')
    current_heading = None
    
    for line in sections:
        line = line.strip()
        if not line:
            continue
            
        if line.startswith('**') and line.endswith('**'):
            # Main heading
            heading_text = line.strip('**')
            current_heading = doc.add_heading(heading_text, level=1)
            current_heading.alignment = 0  # Left alignment
        elif line.startswith('-'):
            # Bullet point
            p = doc.add_paragraph(style='List Bullet')
            text = line[1:].strip()
            
            # Special formatting for Normal/Abnormal status
            if "Normal or Abnormal:" in text:
                status_line = text.split(':')
                run = p.add_run(status_line[0] + ': ')
                status = status_line[1].strip().lower()
                status_run = p.add_run(status_line[1])
                if 'normal' in status and 'abnormal' not in status:
                    status_run.font.color.rgb = RGBColor(0, 128, 0)  # Green
                elif 'abnormal' in status:
                    status_run.font.color.rgb = RGBColor(255, 0, 0)  # Red
                else:
                    status_run.font.color.rgb = RGBColor(255, 165, 0)  # Orange
            else:
                p.add_run(text)
        else:
            # Regular paragraph
            p = doc.add_paragraph()
            p.add_run(line)

    # Add the ECG image
    doc.add_heading('ECG Tracing:', level=1)
    doc.add_picture(image_path, width=Inches(6))
    
    # Save to stream
    doc_stream = BytesIO()
    doc.save(doc_stream)
    doc_stream.seek(0)
    return doc_stream



@app.route('/analyze', methods=['POST'])
def analyze_ecg():
    if 'image' not in request.files:
        return jsonify({'error': 'No image file provided'}), 400

    file = request.files['image']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400

    m_value = request.args.get("m", default=0, type=int)
    print("Received m value:", m_value)

    res = None
    print('this is file value  ',file)
    if m_value == 2:
        try:
            file.seek(0)  # Reset file pointer
            files = {'image': (file.filename, file.read(), file.content_type)}
            res = requests.post("http://127.0.0.1:5000/analyzer", files=files)
            file.seek(0)  # Reset again for later use
            if res.status_code != 200:
                return jsonify({'error': 'API2 returned an error', 'details': res.json()}), 500
        except requests.exceptions.RequestException as e:
            return jsonify({'error': 'Failed to reach API2', 'details': str(e)}), 500


    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        
        os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
        try:
            file.save(filepath)
            res_json = res.json() if res and res.status_code == 200 else {}
            hint_text = f"disease: {res_json.get('prediction','')}" if res else "hint: "
            ecg_details = generate_ecg_details(filepath, hint_text)

            # Create document
            doc_stream = create_doc(ecg_details, filepath)
            
            # Convert to base64
            doc_base64 = base64.b64encode(doc_stream.getvalue()).decode('utf-8')
            
            # Prepare response
            result = {
                "report": ecg_details,
                "document": doc_base64
            }

            os.remove(filepath)
            return jsonify(result)

        except Exception as e:
            if os.path.exists(filepath):
                os.remove(filepath)
            return jsonify({'error': str(e)}), 500

    return jsonify({'error': 'Invalid file type'}), 400

if __name__ == '__main__':
    app.run(debug=True,port=5001)